{"version":3,"sources":["family.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","id","App","props","state","choices","correct","display","gameIsWon","index","minutes","seconds","getCoords","bind","evaluateChoice","start","Date","totalSeconds","timer","setInterval","Math","round","floor","String","setState","clearInterval","event","this","choice","target","value","count","cell","document","getElementById","classList","remove","add","contains","Number","Array","from","querySelectorAll","forEach","moreCell","className","onChange","src","family","alt","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,qC,oNCoK3C,SAASC,IACP,OACE,6BACE,yBAAKC,GAAG,SACN,6CAEF,yBAAKA,GAAG,YACN,gDAMOC,M,kDA5Kb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,oBACTC,QAAS,EACTC,SAAS,EACTC,UAAW,YACXC,MAAO,EACPC,QAAS,EACTC,QAAS,MAEX,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAZL,E,gEAeG,IAAD,OACfE,EAAQ,IAAIC,KACZL,EAAU,EACVD,EAAU,EACVO,EAAe,EACfC,EAAQC,aAAY,WACtBF,EAAeG,KAAKC,OAAO,IAAIL,KAASD,GAAO,KAC/CL,EAAUU,KAAKE,MAAML,EAAa,KAClCN,EAAUM,EAA0B,GAAVP,GACb,KACXC,EAAU,IAAMY,OAAOZ,IAEzB,EAAKa,SAAS,CAACd,QAASA,IACxB,EAAKc,SAAS,CAACb,QAASA,IACE,IAAvB,EAAKP,MAAME,UACZmB,cAAcP,GACd,EAAKM,SAAS,CAAChB,UAAW,kBAE3B,O,qCAGUkB,GACb,IAAIjB,EAAQkB,KAAKvB,MAAMK,MACnBmB,EAASF,EAAMG,OAAOC,MACtBxB,GAAU,EACVyB,EAAQJ,KAAKvB,MAAME,QACvB,GAAa,IAAVG,GAAyB,gBAAVmB,EAAwB,CACxC,IAAII,EAAOC,SAASC,eAAe,KACnCF,EAAKG,UAAUC,OAAO,YACtBJ,EAAKG,UAAUE,IAAI,WACnB/B,GAAU,EACVyB,GAAS,EACTJ,KAAKH,SAAS,CAAClB,QAASyB,IAE1B,GAAa,IAAVtB,GAAyB,WAAVmB,EAAmB,CACnC,IAAII,EAAOC,SAASC,eAAe,KACnCF,EAAKG,UAAUC,OAAO,YACtBJ,EAAKG,UAAUE,IAAI,WACnB/B,GAAU,EACVyB,GAAS,EACTJ,KAAKH,SAAS,CAAClB,QAASyB,IAE1B,GAAa,IAAVtB,GAAyB,WAAVmB,EAAmB,CACnC,IAAII,EAAOC,SAASC,eAAe,KACnCF,EAAKG,UAAUC,OAAO,YACtBJ,EAAKG,UAAUE,IAAI,WACnB/B,GAAU,EACVyB,GAAS,EACTJ,KAAKH,SAAS,CAAClB,QAASyB,IAE1B,GAAa,IAAVtB,GAAyB,gBAAVmB,EAAwB,CACxC,IAAII,EAAOC,SAASC,eAAe,KACnCF,EAAKG,UAAUC,OAAO,YACtBJ,EAAKG,UAAUE,IAAI,WACnB/B,GAAU,EACVyB,GAAS,EACTJ,KAAKH,SAAS,CAAClB,QAASyB,IAE1B,GAAa,IAAVtB,GAAyB,SAAVmB,EAAiB,CACjC,IAAII,EAAOC,SAASC,eAAe,KACnCF,EAAKG,UAAUC,OAAO,YACtBJ,EAAKG,UAAUE,IAAI,WACnB/B,GAAU,EACVyB,GAAS,EACTJ,KAAKH,SAAS,CAAClB,QAASyB,IAE1B,GAAa,IAAVtB,GAAyB,YAAVmB,EAAoB,CACpC,IAAII,EAAOC,SAASC,eAAe,KACnCF,EAAKG,UAAUC,OAAO,YACtBJ,EAAKG,UAAUE,IAAI,WACnB/B,GAAU,EACVyB,GAAS,EACTJ,KAAKH,SAAS,CAAClB,QAASyB,IAE1B,GAAa,IAAVtB,GAAyB,WAAVmB,EAAmB,CACnC,IAAII,EAAOC,SAASC,eAAe,KACnCF,EAAKG,UAAUC,OAAO,YACtBJ,EAAKG,UAAUE,IAAI,WACnB/B,GAAU,EACVyB,GAAS,EACTJ,KAAKH,SAAS,CAAClB,QAASyB,IAE1B,IAAe,IAAZzB,IAA8F,IAAzE2B,SAASC,eAAeX,OAAOd,IAAQ0B,UAAUG,SAAS,WAAsB,CACtG,IAAIN,EAAOC,SAASC,eAAeX,OAAOd,IAC1CuB,EAAKG,UAAUC,OAAO,YACtBJ,EAAKG,UAAUE,IAAI,gB,gCAIbX,GACR,IAAIjB,EAAQ8B,OAAOb,EAAMG,OAAO5B,IAClBuC,MAAMC,KAAKR,SAASS,iBAAiB,cAC7CC,SAAQ,SAAAX,GAAI,OAAIA,EAAKG,UAAUC,OAAO,eAC1BI,MAAMC,KAAKR,SAASS,iBAAiB,eAC7CC,SAAQ,SAAAC,GAAQ,OAAIA,EAAST,UAAUC,OAAO,gBACnDV,EAAMG,OAAOM,UAAUG,SAAS,YACnCZ,EAAMG,OAAOM,UAAUE,IAAI,YAE7BV,KAAKH,SAAS,CAACjB,SAAS,IACxBoB,KAAKH,SAAS,CAACf,MAAOA,IACtBkB,KAAKH,SAAS,CAACnB,QAAS,sB,+BAIxB,OACE,yBAAKwC,UAAU,OACb,kBAAC7C,EAAD,MACA,yBAAK6C,UAAWlB,KAAKvB,MAAMI,WAA3B,aAAiDmB,KAAKvB,MAAMM,QAA5D,IAAsEiB,KAAKvB,MAAMO,SACjF,yBAAKkC,UAAU,SAASlB,KAAKvB,MAAMM,QAAnC,IAA6CiB,KAAKvB,MAAMO,SACxD,4BAAQkC,UAAWlB,KAAKvB,MAAMC,QAASyC,SAAUnB,KAAKb,gBACpD,8DACA,4BAAQgB,MAAM,eAAd,eACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,SAEF,yBAAKe,UAAU,kBACb,yBAAKA,UAAU,iBACX,yBAAKE,IAAKC,IAAQH,UAAU,eAAeI,IAAI,KAC/C,yBAAKJ,UAAU,iBAAiBK,QAASvB,KAAKf,WAC5C,yBAAKiC,UAAU,OAAO5C,GAAG,MACzB,yBAAK4C,UAAU,OAAO5C,GAAG,MACzB,yBAAK4C,UAAU,OAAO5C,GAAG,MACzB,yBAAK4C,UAAU,OAAO5C,GAAG,MACzB,yBAAK4C,UAAU,OAAO5C,GAAG,MACzB,yBAAK4C,UAAU,OAAO5C,GAAG,MACzB,yBAAK4C,UAAU,OAAO5C,GAAG,MACzB,yBAAK4C,UAAU,OAAO5C,GAAG,MACzB,yBAAK4C,UAAU,OAAO5C,GAAG,MACzB,yBAAK4C,UAAU,OAAO5C,GAAG,OACzB,yBAAK4C,UAAU,OAAO5C,GAAG,OACzB,yBAAK4C,UAAU,OAAO5C,GAAG,e,GAtJvBkD,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6fd5677b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/family.5fb44e0b.jpeg\";","import React from 'react';\nimport family from './family.jpeg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      choices: \"choices invisible\",\n      correct: 0,\n      display: false,\n      gameIsWon: \"invisible\",\n      index: 0,\n      minutes: 0,\n      seconds: \"00\"\n    };\n    this.getCoords = this.getCoords.bind(this);\n    this.evaluateChoice = this.evaluateChoice.bind(this);\n  }\n\n  componentDidMount () {\n    let start = new Date();\n    let seconds = 0;\n    let minutes = 0;\n    let totalSeconds = 0;\n    let timer = setInterval(() => {\n      totalSeconds = Math.round((new Date() - start)/1000);\n      minutes = Math.floor(totalSeconds/60);\n      seconds = totalSeconds - (minutes * 60);\n      if(seconds < 10) {\n        seconds = \"0\" + String(seconds);\n      }\n      this.setState({minutes: minutes});\n      this.setState({seconds: seconds});\n      if(this.state.correct === 7) {\n        clearInterval(timer);\n        this.setState({gameIsWon: \"winMessage\"});\n      }\n    }, 1000);\n  }\n\n  evaluateChoice(event) {\n    let index = this.state.index;\n    let choice = event.target.value;\n    let correct = false;\n    let count = this.state.correct;\n    if(index === 1 && choice ===\"Grandfather\"){\n      let cell = document.getElementById(\"1\");\n      cell.classList.remove(\"selected\");\n      cell.classList.add(\"correct\");\n      correct = true;\n      count += 1;\n      this.setState({correct: count});\n    }\n    if(index === 2 && choice ===\"Mother\"){\n      let cell = document.getElementById(\"2\");\n      cell.classList.remove(\"selected\");\n      cell.classList.add(\"correct\");\n      correct = true;\n      count += 1;\n      this.setState({correct: count});\n    }\n    if(index === 3 && choice ===\"Father\"){\n      let cell = document.getElementById(\"3\");\n      cell.classList.remove(\"selected\");\n      cell.classList.add(\"correct\");\n      correct = true;\n      count += 1;\n      this.setState({correct: count});\n    }\n    if(index === 4 && choice ===\"Grandmother\"){\n      let cell = document.getElementById(\"4\");\n      cell.classList.remove(\"selected\");\n      cell.classList.add(\"correct\");\n      correct = true;\n      count += 1;\n      this.setState({correct: count});\n    }\n    if(index === 6 && choice ===\"Baby\"){\n      let cell = document.getElementById(\"6\");\n      cell.classList.remove(\"selected\");\n      cell.classList.add(\"correct\");\n      correct = true;\n      count += 1;\n      this.setState({correct: count});\n    }\n    if(index === 7 && choice ===\"Brother\"){\n      let cell = document.getElementById(\"7\");\n      cell.classList.remove(\"selected\");\n      cell.classList.add(\"correct\");\n      correct = true;\n      count += 1;\n      this.setState({correct: count});\n    }\n    if(index === 8 && choice ===\"Sister\"){\n      let cell = document.getElementById(\"8\");\n      cell.classList.remove(\"selected\");\n      cell.classList.add(\"correct\");\n      correct = true;\n      count += 1;\n      this.setState({correct: count});\n    }\n    if(correct === false && document.getElementById(String(index)).classList.contains(\"correct\") === false) {\n      let cell = document.getElementById(String(index));\n      cell.classList.remove(\"selected\");\n      cell.classList.add(\"incorrect\");\n    }\n  }\n\n  getCoords(event) {\n    let index = Number(event.target.id);\n    const cells = Array.from(document.querySelectorAll(\".selected\"));\n    cells.forEach(cell => cell.classList.remove(\"selected\"));\n    const moreCells = Array.from(document.querySelectorAll(\".incorrect\"));\n    moreCells.forEach(moreCell => moreCell.classList.remove(\"incorrect\"));\n    if(!(event.target.classList.contains(\"correct\"))){\n      event.target.classList.add(\"selected\");\n    }\n    this.setState({display: true});\n    this.setState({index: index});\n    this.setState({choices: \"choices visible\"});\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Title />\n        <div className={this.state.gameIsWon}>Your Time {this.state.minutes}:{this.state.seconds}</div>\n        <div className=\"timer\">{this.state.minutes}:{this.state.seconds}</div>\n        <select className={this.state.choices} onChange={this.evaluateChoice}>\n          <option>Which Family Member is it?</option>\n          <option value=\"Grandfather\">Grandfather</option>\n          <option value=\"Grandmother\">Grandmother</option>\n          <option value=\"Father\">Father</option>\n          <option value=\"Mother\">Mother</option>\n          <option value=\"Brother\">Brother</option>\n          <option value=\"Sister\">Sister</option>\n          <option value=\"Baby\">Baby</option>\n        </select>\n        <div className=\"outsideWrapper\">\n          <div className=\"insideWrapper\">\n              <img src={family} className=\"coveredImage\" alt=\"\"/>\n              <div className=\"coveringCanvas\" onClick={this.getCoords}>\n                <div className=\"cell\" id=\"1\"></div>\n                <div className=\"cell\" id=\"2\"></div>\n                <div className=\"cell\" id=\"3\"></div>\n                <div className=\"cell\" id=\"4\"></div>\n                <div className=\"cell\" id=\"5\"></div>\n                <div className=\"cell\" id=\"6\"></div>\n                <div className=\"cell\" id=\"7\"></div>\n                <div className=\"cell\" id=\"8\"></div>\n                <div className=\"cell\" id=\"9\"></div>\n                <div className=\"cell\" id=\"10\"></div>\n                <div className=\"cell\" id=\"11\"></div>\n                <div className=\"cell\" id=\"12\"></div>\n              </div>\n          </div>\n        </div>\n        \n      </div>\n    );\n    }\n}\n\nfunction Title() {\n  return (\n    <div>\n      <div id=\"title\">\n        <h1>Photo-Tagger</h1>\n      </div>\n      <div id=\"subtitle\">\n        <h2>By Kevin Satti</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}